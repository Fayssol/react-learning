1. Fichier App.tsx (Point d'entrée principal)

Voici le code complet, puis nous le décomposerons :

'use client';

import { I18nProvider } from '@cloudscape-design/components/i18n';
import messages from '@cloudscape-design/components/i18n/messages/all.en';
import { AppContext } from './root/context';
import AppRoutes from './routes/app-routes';
import { useState } from 'react';
import { DEFAULT_APP_CONTEXT_PROPS } from './constants/constants';

const LOCALE = 'en';

export default function App() {
  const [activeNavigation, setActiveNavigation] = useState('home');
  const [navigationOpen, setNavigationOpen] = useState(false);

  const contextValues = {
    ...DEFAULT_APP_CONTEXT_PROPS,
    activeNavigation,
    setActiveNavigation,
    navigationOpen,
    setNavigationOpen,
  };

  return (
    <AppContext.Provider value={contextValues}>
      <I18nProvider locale={LOCALE} messages={[messages]}>
        <AppRoutes />
      </I18nProvider>
    </AppContext.Provider>
  );
}

Décomposition du code :
1.1. Première ligne :

'use client';

    Pourquoi ? : Cela informe que ce composant doit être exécuté sur le client (navigateur) et non sur le serveur.
    À retenir : Toujours nécessaire pour les projets React utilisant Cloudscape Design ou tout framework basé sur le client.

1.2. Importation des dépendances :

import { I18nProvider } from '@cloudscape-design/components/i18n';
import messages from '@cloudscape-design/components/i18n/messages/all.en';
import { AppContext } from './root/context';
import AppRoutes from './routes/app-routes';
import { useState } from 'react';
import { DEFAULT_APP_CONTEXT_PROPS } from './constants/constants';

    Ligne 1 : I18nProvider
        Vient de la librairie Cloudscape Design.
        Sert à gérer la traduction et l’internationalisation (i18n).
        Dans cet exemple, l'application utilise l'anglais par défaut.

    Ligne 2 : messages
        Contient les messages de traduction en anglais.
        Ces messages sont chargés automatiquement depuis le package.

    Ligne 3 : AppContext
        Représente le contexte global de l'application, défini dans root/context.tsx.
        Permet de partager des états entre différents composants.

    Ligne 4 : AppRoutes
        Contient la configuration des routes (chemins) de l'application.

    Ligne 5 : useState
        Hook React utilisé pour gérer des états internes, comme la navigation active ou l'ouverture du panneau latéral.

    Ligne 6 : DEFAULT_APP_CONTEXT_PROPS
        Définit des valeurs par défaut pour les états globaux.

1.3. Déclaration d'une constante pour la langue :

const LOCALE = 'en';

    La variable LOCALE contient la langue utilisée pour l'interface (anglais ici).

1.4. Déclaration des états :

const [activeNavigation, setActiveNavigation] = useState('home');
const [navigationOpen, setNavigationOpen] = useState(false);

    activeNavigation :
        Représente la navigation active (par défaut, la page "home").
        Peut être modifiée avec setActiveNavigation.

    navigationOpen :
        Gère l'ouverture ou la fermeture du panneau latéral.
        Sa valeur par défaut est false (fermé).

1.5. Définition des valeurs du contexte :

const contextValues = {
  ...DEFAULT_APP_CONTEXT_PROPS,
  activeNavigation,
  setActiveNavigation,
  navigationOpen,
  setNavigationOpen,
};

    Explication :
    contextValues est un objet combinant :
        Les valeurs par défaut définies dans DEFAULT_APP_CONTEXT_PROPS.
        Les nouveaux états déclarés (activeNavigation, navigationOpen).

    Pourquoi ? : Ces données seront accessibles dans toute l'application via le AppContext.

1.6. Rendu du composant principal :

return (
  <AppContext.Provider value={contextValues}>
    <I18nProvider locale={LOCALE} messages={[messages]}>
      <AppRoutes />
    </I18nProvider>
  </AppContext.Provider>
);

    AppContext.Provider :
        Fournit les données du contexte (contextValues) à tous les composants enfants.

    I18nProvider :
        Fournit la langue et les messages de traduction à l'application.

    AppRoutes :
        Affiche les routes et charge les composants correspondants.

2. Résumé de App.tsx

    But principal : Configurer le contexte global, l'internationalisation, et les routes de l'application.
    Étapes importantes :
        Déclarer des états globaux (activeNavigation, navigationOpen).
        Combiner ces états avec les valeurs par défaut.
        Fournir le contexte global avec AppContext.Provider.
        Gérer l'internationalisation avec I18nProvider.
        Charger les routes via AppRoutes.

